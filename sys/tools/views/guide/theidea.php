<h1>Why Use Redox?</h1>

<h2>How Ruby on Rails, and various PHP frameworks miss the mark.</h2>
<p>I have used a number of different MVC frameworks for PHP and I also played around with and learned to program in ruby on rails. That being said, I was never really happy with any single one. My favorites are, without question, CodeIgniter (and its branch Kohana) and Ruby on Rails. Both of these, however, had some deal breaking flaws that I could just never get past. For one, both struggle to be speedy enough for large apps (the main issue with ruby on rails) and while PHP is offered everywhere ruby is not (the second rails killer.) CodeIgniter simply isn't as intelligently put together as rails is and lacks a lot of things that I would consider absolutely necessary (like solid form validation, get variables, a smart presentation layer, etc).</p>
<p>As a result of my frustrations I took all the good things from these frameworks and built a new more intuitive and much more intelligent framework. Redox doesn't sacrafice speed for bloat... and while it is as powerful as CodeIgniter it is at its worst 2 times faster and at its best 20 times faster than a CI app. Redox has a very strong philosophy on preventing code repetition and making things as intuitive as possible. As a result a lot of things just work right from the very begining (like dropping a view into a layout that replaces the header and footer style of programming that plagues us). The most exciting aspect of it to me though, is the inclusion of modules which are more or less view independent bits of functionality. Imagine being able to add a blog with a click of a button and then have free reign to change it to your desires and then put the face on it you want. (did I mention that it will actually create the tables and everything for you too?) My hope is that module creation will really bring about a community for Redox and lead to an amazingly powerful base of drop in, completely custom solutions.</p>
<p>This is what redox is all about: making everything just work the way it always should have in the first place - intelligently, quickly, and powerfully.</p>

<h2>Why Redox is better.</h2>
<p>It was coded by Chris Granger.</p>